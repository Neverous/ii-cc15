*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  %1 = alloca [3 x double]*, align 8
  %2 = alloca [3 x double]*, align 8
  %3 = alloca [3 x double]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  %k = alloca i32, align 4
  store [3 x double]* %m1, [3 x double]** %1, align 8
  store [3 x double]* %m2, [3 x double]** %2, align 8
  store [3 x double]* %m3, [3 x double]** %3, align 8
  store i32 0, i32* %i, align 4
  br label %4

; <label>:4                                       ; preds = %23, %0
  %5 = load i32, i32* %i, align 4
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %7, label %26

; <label>:7                                       ; preds = %4
  store i32 0, i32* %j, align 4
  br label %8

; <label>:8                                       ; preds = %19, %7
  %9 = load i32, i32* %j, align 4
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %11, label %22

; <label>:11                                      ; preds = %8
  %12 = load i32, i32* %j, align 4
  %13 = zext i32 %12 to i64
  %14 = load i32, i32* %i, align 4
  %15 = zext i32 %14 to i64
  %16 = load [3 x double]*, [3 x double]** %3, align 8
  %17 = getelementptr inbounds [3 x double], [3 x double]* %16, i64 %15
  %18 = getelementptr inbounds [3 x double], [3 x double]* %17, i32 0, i64 %13
  store double 0.000000e+00, double* %18, align 8
  br label %19

; <label>:19                                      ; preds = %11
  %20 = load i32, i32* %j, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %j, align 4
  br label %8

; <label>:22                                      ; preds = %8
  br label %23

; <label>:23                                      ; preds = %22
  %24 = load i32, i32* %i, align 4
  %25 = add i32 %24, 1
  store i32 %25, i32* %i, align 4
  br label %4

; <label>:26                                      ; preds = %4
  store i32 0, i32* %i1, align 4
  br label %27

; <label>:27                                      ; preds = %73, %26
  %28 = load i32, i32* %i1, align 4
  %29 = icmp ult i32 %28, 3
  br i1 %29, label %30, label %76

; <label>:30                                      ; preds = %27
  store i32 0, i32* %j2, align 4
  br label %31

; <label>:31                                      ; preds = %69, %30
  %32 = load i32, i32* %j2, align 4
  %33 = icmp ult i32 %32, 3
  br i1 %33, label %34, label %72

; <label>:34                                      ; preds = %31
  store i32 0, i32* %k, align 4
  br label %35

; <label>:35                                      ; preds = %65, %34
  %36 = load i32, i32* %k, align 4
  %37 = icmp ult i32 %36, 3
  br i1 %37, label %38, label %68

; <label>:38                                      ; preds = %35
  %39 = load i32, i32* %j2, align 4
  %40 = zext i32 %39 to i64
  %41 = load i32, i32* %i1, align 4
  %42 = zext i32 %41 to i64
  %43 = load [3 x double]*, [3 x double]** %1, align 8
  %44 = getelementptr inbounds [3 x double], [3 x double]* %43, i64 %42
  %45 = getelementptr inbounds [3 x double], [3 x double]* %44, i32 0, i64 %40
  %46 = load double, double* %45, align 8
  %47 = load i32, i32* %k, align 4
  %48 = zext i32 %47 to i64
  %49 = load i32, i32* %j2, align 4
  %50 = zext i32 %49 to i64
  %51 = load [3 x double]*, [3 x double]** %2, align 8
  %52 = getelementptr inbounds [3 x double], [3 x double]* %51, i64 %50
  %53 = getelementptr inbounds [3 x double], [3 x double]* %52, i32 0, i64 %48
  %54 = load double, double* %53, align 8
  %55 = fadd double %46, %54
  %56 = load i32, i32* %k, align 4
  %57 = zext i32 %56 to i64
  %58 = load i32, i32* %i1, align 4
  %59 = zext i32 %58 to i64
  %60 = load [3 x double]*, [3 x double]** %3, align 8
  %61 = getelementptr inbounds [3 x double], [3 x double]* %60, i64 %59
  %62 = getelementptr inbounds [3 x double], [3 x double]* %61, i32 0, i64 %57
  %63 = load double, double* %62, align 8
  %64 = fadd double %63, %55
  store double %64, double* %62, align 8
  br label %65

; <label>:65                                      ; preds = %38
  %66 = load i32, i32* %k, align 4
  %67 = add i32 %66, 1
  store i32 %67, i32* %k, align 4
  br label %35

; <label>:68                                      ; preds = %35
  br label %69

; <label>:69                                      ; preds = %68
  %70 = load i32, i32* %j2, align 4
  %71 = add i32 %70, 1
  store i32 %71, i32* %j2, align 4
  br label %31

; <label>:72                                      ; preds = %31
  br label %73

; <label>:73                                      ; preds = %72
  %74 = load i32, i32* %i1, align 4
  %75 = add i32 %74, 1
  store i32 %75, i32* %i1, align 4
  br label %27

; <label>:76                                      ; preds = %27
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  %1 = alloca [3 x double]*, align 8
  %2 = alloca [3 x double]*, align 8
  %3 = alloca [3 x double]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  %k = alloca i32, align 4
  store [3 x double]* %m1, [3 x double]** %1, align 8
  store [3 x double]* %m2, [3 x double]** %2, align 8
  store [3 x double]* %m3, [3 x double]** %3, align 8
  store i32 0, i32* %i, align 4
  br label %4

; <label>:4                                       ; preds = %21, %0
  %5 = load i32, i32* %i, align 4
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %7, label %24

; <label>:7                                       ; preds = %4
  store i32 0, i32* %j, align 4
  br label %8

; <label>:8                                       ; preds = %11, %7
  %9 = load i32, i32* %j, align 4
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %11, label %21

; <label>:11                                      ; preds = %8
  %12 = load i32, i32* %j, align 4
  %13 = zext i32 %12 to i64
  %14 = load i32, i32* %i, align 4
  %15 = zext i32 %14 to i64
  %16 = load [3 x double]*, [3 x double]** %3, align 8
  %17 = getelementptr inbounds [3 x double], [3 x double]* %16, i64 %15
  %18 = getelementptr inbounds [3 x double], [3 x double]* %17, i32 0, i64 %13
  store double 0.000000e+00, double* %18, align 8
  %19 = load i32, i32* %j, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %j, align 4
  br label %8

; <label>:21                                      ; preds = %8
  %22 = load i32, i32* %i, align 4
  %23 = add i32 %22, 1
  store i32 %23, i32* %i, align 4
  br label %4

; <label>:24                                      ; preds = %4
  store i32 0, i32* %i1, align 4
  br label %25

; <label>:25                                      ; preds = %67, %24
  %26 = load i32, i32* %i1, align 4
  %27 = icmp ult i32 %26, 3
  br i1 %27, label %28, label %70

; <label>:28                                      ; preds = %25
  store i32 0, i32* %j2, align 4
  br label %29

; <label>:29                                      ; preds = %65, %28
  %30 = load i32, i32* %j2, align 4
  %31 = icmp ult i32 %30, 3
  br i1 %31, label %32, label %67

; <label>:32                                      ; preds = %29
  store i32 0, i32* %k, align 4
  br label %33

; <label>:33                                      ; preds = %37, %32
  %34 = load i32, i32* %k, align 4
  %35 = icmp ult i32 %34, 3
  %36 = load i32, i32* %j2, align 4
  br i1 %35, label %37, label %65

; <label>:37                                      ; preds = %33
  %38 = zext i32 %36 to i64
  %39 = load i32, i32* %i1, align 4
  %40 = zext i32 %39 to i64
  %41 = load [3 x double]*, [3 x double]** %1, align 8
  %42 = getelementptr inbounds [3 x double], [3 x double]* %41, i64 %40
  %43 = getelementptr inbounds [3 x double], [3 x double]* %42, i32 0, i64 %38
  %44 = load double, double* %43, align 8
  %45 = load i32, i32* %k, align 4
  %46 = zext i32 %45 to i64
  %47 = load i32, i32* %j2, align 4
  %48 = zext i32 %47 to i64
  %49 = load [3 x double]*, [3 x double]** %2, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %49, i64 %48
  %51 = getelementptr inbounds [3 x double], [3 x double]* %50, i32 0, i64 %46
  %52 = load double, double* %51, align 8
  %53 = fadd double %44, %52
  %54 = load i32, i32* %k, align 4
  %55 = zext i32 %54 to i64
  %56 = load i32, i32* %i1, align 4
  %57 = zext i32 %56 to i64
  %58 = load [3 x double]*, [3 x double]** %3, align 8
  %59 = getelementptr inbounds [3 x double], [3 x double]* %58, i64 %57
  %60 = getelementptr inbounds [3 x double], [3 x double]* %59, i32 0, i64 %55
  %61 = load double, double* %60, align 8
  %62 = fadd double %61, %53
  store double %62, double* %60, align 8
  %63 = load i32, i32* %k, align 4
  %64 = add i32 %63, 1
  store i32 %64, i32* %k, align 4
  br label %33

; <label>:65                                      ; preds = %33
  %66 = add i32 %36, 1
  store i32 %66, i32* %j2, align 4
  br label %29

; <label>:67                                      ; preds = %29
  %68 = load i32, i32* %i1, align 4
  %69 = add i32 %68, 1
  store i32 %69, i32* %i1, align 4
  br label %25

; <label>:70                                      ; preds = %25
  ret void
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %12, %0
  %i.0 = phi i32 [ 0, %0 ], [ %13, %12 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %6, %3
  %j.0 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %5 = icmp ult i32 %j.0, 3
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %4
  %7 = zext i32 %j.0 to i64
  %8 = zext i32 %i.0 to i64
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %8
  %10 = getelementptr inbounds [3 x double], [3 x double]* %9, i32 0, i64 %7
  store double 0.000000e+00, double* %10, align 8
  %11 = add i32 %j.0, 1
  br label %4

; <label>:12                                      ; preds = %4
  %13 = add i32 %i.0, 1
  br label %1

; <label>:14                                      ; preds = %1
  br label %15

; <label>:15                                      ; preds = %44, %14
  %i1.0 = phi i32 [ 0, %14 ], [ %45, %44 ]
  %16 = icmp ult i32 %i1.0, 3
  br i1 %16, label %17, label %46

; <label>:17                                      ; preds = %15
  br label %18

; <label>:18                                      ; preds = %42, %17
  %j2.0 = phi i32 [ 0, %17 ], [ %43, %42 ]
  %19 = icmp ult i32 %j2.0, 3
  br i1 %19, label %20, label %44

; <label>:20                                      ; preds = %18
  br label %21

; <label>:21                                      ; preds = %23, %20
  %k.0 = phi i32 [ 0, %20 ], [ %41, %23 ]
  %22 = icmp ult i32 %k.0, 3
  br i1 %22, label %23, label %42

; <label>:23                                      ; preds = %21
  %24 = zext i32 %j2.0 to i64
  %25 = zext i32 %i1.0 to i64
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %26, i32 0, i64 %24
  %28 = load double, double* %27, align 8
  %29 = zext i32 %k.0 to i64
  %30 = zext i32 %j2.0 to i64
  %31 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %30
  %32 = getelementptr inbounds [3 x double], [3 x double]* %31, i32 0, i64 %29
  %33 = load double, double* %32, align 8
  %34 = fadd double %28, %33
  %35 = zext i32 %k.0 to i64
  %36 = zext i32 %i1.0 to i64
  %37 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %36
  %38 = getelementptr inbounds [3 x double], [3 x double]* %37, i32 0, i64 %35
  %39 = load double, double* %38, align 8
  %40 = fadd double %39, %34
  store double %40, double* %38, align 8
  %41 = add i32 %k.0, 1
  br label %21

; <label>:42                                      ; preds = %21
  %43 = add i32 %j2.0, 1
  br label %18

; <label>:44                                      ; preds = %18
  %45 = add i32 %i1.0, 1
  br label %15

; <label>:46                                      ; preds = %15
  ret void
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %12, %0
  %i.0 = phi i32 [ 0, %0 ], [ %13, %12 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %6, %3
  %j.0 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %5 = icmp ult i32 %j.0, 3
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %4
  %7 = zext i32 %j.0 to i64
  %8 = zext i32 %i.0 to i64
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %8
  %10 = getelementptr inbounds [3 x double], [3 x double]* %9, i32 0, i64 %7
  store double 0.000000e+00, double* %10, align 8
  %11 = add i32 %j.0, 1
  br label %4

; <label>:12                                      ; preds = %4
  %13 = add i32 %i.0, 1
  br label %1

; <label>:14                                      ; preds = %1
  br label %15

; <label>:15                                      ; preds = %41, %14
  %i1.0 = phi i32 [ 0, %14 ], [ %42, %41 ]
  %16 = icmp ult i32 %i1.0, 3
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %15
  br label %18

; <label>:18                                      ; preds = %39, %17
  %j2.0 = phi i32 [ 0, %17 ], [ %40, %39 ]
  %19 = icmp ult i32 %j2.0, 3
  br i1 %19, label %20, label %41

; <label>:20                                      ; preds = %18
  br label %21

; <label>:21                                      ; preds = %23, %20
  %k.0 = phi i32 [ 0, %20 ], [ %38, %23 ]
  %22 = icmp ult i32 %k.0, 3
  br i1 %22, label %23, label %39

; <label>:23                                      ; preds = %21
  %24 = zext i32 %j2.0 to i64
  %25 = zext i32 %i1.0 to i64
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %26, i32 0, i64 %24
  %28 = load double, double* %27, align 8
  %29 = zext i32 %k.0 to i64
  %30 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %24
  %31 = getelementptr inbounds [3 x double], [3 x double]* %30, i32 0, i64 %29
  %32 = load double, double* %31, align 8
  %33 = fadd double %28, %32
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %25
  %35 = getelementptr inbounds [3 x double], [3 x double]* %34, i32 0, i64 %29
  %36 = load double, double* %35, align 8
  %37 = fadd double %36, %33
  store double %37, double* %35, align 8
  %38 = add i32 %k.0, 1
  br label %21

; <label>:39                                      ; preds = %21
  %40 = add i32 %j2.0, 1
  br label %18

; <label>:41                                      ; preds = %18
  %42 = add i32 %i1.0, 1
  br label %15

; <label>:43                                      ; preds = %15
  ret void
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %12, %0
  %i.0 = phi i32 [ 0, %0 ], [ %13, %12 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %6, %3
  %j.0 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %5 = icmp ult i32 %j.0, 3
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %4
  %7 = zext i32 %j.0 to i64
  %8 = zext i32 %i.0 to i64
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %8
  %10 = getelementptr inbounds [3 x double], [3 x double]* %9, i32 0, i64 %7
  store double 0.000000e+00, double* %10, align 8
  %11 = add i32 %j.0, 1
  br label %4

; <label>:12                                      ; preds = %4
  %13 = add i32 %i.0, 1
  br label %1

; <label>:14                                      ; preds = %1
  br label %15

; <label>:15                                      ; preds = %41, %14
  %i1.0 = phi i32 [ 0, %14 ], [ %42, %41 ]
  %16 = icmp ult i32 %i1.0, 3
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %15
  br label %18

; <label>:18                                      ; preds = %39, %17
  %j2.0 = phi i32 [ 0, %17 ], [ %40, %39 ]
  %19 = icmp ult i32 %j2.0, 3
  br i1 %19, label %20, label %41

; <label>:20                                      ; preds = %18
  br label %21

; <label>:21                                      ; preds = %23, %20
  %k.0 = phi i32 [ 0, %20 ], [ %38, %23 ]
  %22 = icmp ult i32 %k.0, 3
  br i1 %22, label %23, label %39

; <label>:23                                      ; preds = %21
  %24 = zext i32 %j2.0 to i64
  %25 = zext i32 %i1.0 to i64
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %26, i32 0, i64 %24
  %28 = load double, double* %27, align 8
  %29 = zext i32 %k.0 to i64
  %30 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %24
  %31 = getelementptr inbounds [3 x double], [3 x double]* %30, i32 0, i64 %29
  %32 = load double, double* %31, align 8
  %33 = fadd double %28, %32
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %25
  %35 = getelementptr inbounds [3 x double], [3 x double]* %34, i32 0, i64 %29
  %36 = load double, double* %35, align 8
  %37 = fadd double %36, %33
  store double %37, double* %35, align 8
  %38 = add i32 %k.0, 1
  br label %21

; <label>:39                                      ; preds = %21
  %40 = add i32 %j2.0, 1
  br label %18

; <label>:41                                      ; preds = %18
  %42 = add i32 %i1.0, 1
  br label %15

; <label>:43                                      ; preds = %15
  ret void
}
*** IR Dump After Interprocedural Sparse Conditional Constant Propagation ***; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %12, %0
  %i.0 = phi i32 [ 0, %0 ], [ %13, %12 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %6, %3
  %j.0 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %5 = icmp ult i32 %j.0, 3
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %4
  %7 = zext i32 %j.0 to i64
  %8 = zext i32 %i.0 to i64
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %8
  %10 = getelementptr inbounds [3 x double], [3 x double]* %9, i32 0, i64 %7
  store double 0.000000e+00, double* %10, align 8
  %11 = add i32 %j.0, 1
  br label %4

; <label>:12                                      ; preds = %4
  %13 = add i32 %i.0, 1
  br label %1

; <label>:14                                      ; preds = %1
  br label %15

; <label>:15                                      ; preds = %41, %14
  %i1.0 = phi i32 [ 0, %14 ], [ %42, %41 ]
  %16 = icmp ult i32 %i1.0, 3
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %15
  br label %18

; <label>:18                                      ; preds = %39, %17
  %j2.0 = phi i32 [ 0, %17 ], [ %40, %39 ]
  %19 = icmp ult i32 %j2.0, 3
  br i1 %19, label %20, label %41

; <label>:20                                      ; preds = %18
  br label %21

; <label>:21                                      ; preds = %23, %20
  %k.0 = phi i32 [ 0, %20 ], [ %38, %23 ]
  %22 = icmp ult i32 %k.0, 3
  br i1 %22, label %23, label %39

; <label>:23                                      ; preds = %21
  %24 = zext i32 %j2.0 to i64
  %25 = zext i32 %i1.0 to i64
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %26, i32 0, i64 %24
  %28 = load double, double* %27, align 8
  %29 = zext i32 %k.0 to i64
  %30 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %24
  %31 = getelementptr inbounds [3 x double], [3 x double]* %30, i32 0, i64 %29
  %32 = load double, double* %31, align 8
  %33 = fadd double %28, %32
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %25
  %35 = getelementptr inbounds [3 x double], [3 x double]* %34, i32 0, i64 %29
  %36 = load double, double* %35, align 8
  %37 = fadd double %36, %33
  store double %37, double* %35, align 8
  %38 = add i32 %k.0, 1
  br label %21

; <label>:39                                      ; preds = %21
  %40 = add i32 %j2.0, 1
  br label %18

; <label>:41                                      ; preds = %18
  %42 = add i32 %i1.0, 1
  br label %15

; <label>:43                                      ; preds = %15
  ret void
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
*** IR Dump After Global Variable Optimizer ***; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %12, %0
  %i.0 = phi i32 [ 0, %0 ], [ %13, %12 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %6, %3
  %j.0 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %5 = icmp ult i32 %j.0, 3
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %4
  %7 = zext i32 %j.0 to i64
  %8 = zext i32 %i.0 to i64
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %8
  %10 = getelementptr inbounds [3 x double], [3 x double]* %9, i32 0, i64 %7
  store double 0.000000e+00, double* %10, align 8
  %11 = add i32 %j.0, 1
  br label %4

; <label>:12                                      ; preds = %4
  %13 = add i32 %i.0, 1
  br label %1

; <label>:14                                      ; preds = %1
  br label %15

; <label>:15                                      ; preds = %41, %14
  %i1.0 = phi i32 [ 0, %14 ], [ %42, %41 ]
  %16 = icmp ult i32 %i1.0, 3
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %15
  br label %18

; <label>:18                                      ; preds = %39, %17
  %j2.0 = phi i32 [ 0, %17 ], [ %40, %39 ]
  %19 = icmp ult i32 %j2.0, 3
  br i1 %19, label %20, label %41

; <label>:20                                      ; preds = %18
  br label %21

; <label>:21                                      ; preds = %23, %20
  %k.0 = phi i32 [ 0, %20 ], [ %38, %23 ]
  %22 = icmp ult i32 %k.0, 3
  br i1 %22, label %23, label %39

; <label>:23                                      ; preds = %21
  %24 = zext i32 %j2.0 to i64
  %25 = zext i32 %i1.0 to i64
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %26, i32 0, i64 %24
  %28 = load double, double* %27, align 8
  %29 = zext i32 %k.0 to i64
  %30 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %24
  %31 = getelementptr inbounds [3 x double], [3 x double]* %30, i32 0, i64 %29
  %32 = load double, double* %31, align 8
  %33 = fadd double %28, %32
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %25
  %35 = getelementptr inbounds [3 x double], [3 x double]* %34, i32 0, i64 %29
  %36 = load double, double* %35, align 8
  %37 = fadd double %36, %33
  store double %37, double* %35, align 8
  %38 = add i32 %k.0, 1
  br label %21

; <label>:39                                      ; preds = %21
  %40 = add i32 %j2.0, 1
  br label %18

; <label>:41                                      ; preds = %18
  %42 = add i32 %i1.0, 1
  br label %15

; <label>:43                                      ; preds = %15
  ret void
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
*** IR Dump After Dead Argument Elimination ***; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %12, %0
  %i.0 = phi i32 [ 0, %0 ], [ %13, %12 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %14

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %6, %3
  %j.0 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %5 = icmp ult i32 %j.0, 3
  br i1 %5, label %6, label %12

; <label>:6                                       ; preds = %4
  %7 = zext i32 %j.0 to i64
  %8 = zext i32 %i.0 to i64
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %8
  %10 = getelementptr inbounds [3 x double], [3 x double]* %9, i32 0, i64 %7
  store double 0.000000e+00, double* %10, align 8
  %11 = add i32 %j.0, 1
  br label %4

; <label>:12                                      ; preds = %4
  %13 = add i32 %i.0, 1
  br label %1

; <label>:14                                      ; preds = %1
  br label %15

; <label>:15                                      ; preds = %41, %14
  %i1.0 = phi i32 [ 0, %14 ], [ %42, %41 ]
  %16 = icmp ult i32 %i1.0, 3
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %15
  br label %18

; <label>:18                                      ; preds = %39, %17
  %j2.0 = phi i32 [ 0, %17 ], [ %40, %39 ]
  %19 = icmp ult i32 %j2.0, 3
  br i1 %19, label %20, label %41

; <label>:20                                      ; preds = %18
  br label %21

; <label>:21                                      ; preds = %23, %20
  %k.0 = phi i32 [ 0, %20 ], [ %38, %23 ]
  %22 = icmp ult i32 %k.0, 3
  br i1 %22, label %23, label %39

; <label>:23                                      ; preds = %21
  %24 = zext i32 %j2.0 to i64
  %25 = zext i32 %i1.0 to i64
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %26, i32 0, i64 %24
  %28 = load double, double* %27, align 8
  %29 = zext i32 %k.0 to i64
  %30 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %24
  %31 = getelementptr inbounds [3 x double], [3 x double]* %30, i32 0, i64 %29
  %32 = load double, double* %31, align 8
  %33 = fadd double %28, %32
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %25
  %35 = getelementptr inbounds [3 x double], [3 x double]* %34, i32 0, i64 %29
  %36 = load double, double* %35, align 8
  %37 = fadd double %36, %33
  store double %37, double* %35, align 8
  %38 = add i32 %k.0, 1
  br label %21

; <label>:39                                      ; preds = %21
  %40 = add i32 %j2.0, 1
  br label %18

; <label>:41                                      ; preds = %18
  %42 = add i32 %i1.0, 1
  br label %15

; <label>:43                                      ; preds = %15
  ret void
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %11, %0
  %i.0 = phi i32 [ 0, %0 ], [ %12, %11 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %13

; <label>:3                                       ; preds = %1
  br label %4

; <label>:4                                       ; preds = %6, %3
  %j.0 = phi i32 [ 0, %3 ], [ %10, %6 ]
  %5 = icmp ult i32 %j.0, 3
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %4
  %7 = zext i32 %j.0 to i64
  %8 = zext i32 %i.0 to i64
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %8, i64 %7
  store double 0.000000e+00, double* %9, align 8
  %10 = add i32 %j.0, 1
  br label %4

; <label>:11                                      ; preds = %4
  %12 = add i32 %i.0, 1
  br label %1

; <label>:13                                      ; preds = %1
  br label %14

; <label>:14                                      ; preds = %37, %13
  %i1.0 = phi i32 [ 0, %13 ], [ %38, %37 ]
  %15 = icmp ult i32 %i1.0, 3
  br i1 %15, label %16, label %39

; <label>:16                                      ; preds = %14
  br label %17

; <label>:17                                      ; preds = %35, %16
  %j2.0 = phi i32 [ 0, %16 ], [ %36, %35 ]
  %18 = icmp ult i32 %j2.0, 3
  br i1 %18, label %19, label %37

; <label>:19                                      ; preds = %17
  br label %20

; <label>:20                                      ; preds = %22, %19
  %k.0 = phi i32 [ 0, %19 ], [ %34, %22 ]
  %21 = icmp ult i32 %k.0, 3
  br i1 %21, label %22, label %35

; <label>:22                                      ; preds = %20
  %23 = zext i32 %j2.0 to i64
  %24 = zext i32 %i1.0 to i64
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %24, i64 %23
  %26 = load double, double* %25, align 8
  %27 = zext i32 %k.0 to i64
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %23, i64 %27
  %29 = load double, double* %28, align 8
  %30 = fadd double %26, %29
  %31 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %24, i64 %27
  %32 = load double, double* %31, align 8
  %33 = fadd double %32, %30
  store double %33, double* %31, align 8
  %34 = add i32 %k.0, 1
  br label %20

; <label>:35                                      ; preds = %20
  %36 = add i32 %j2.0, 1
  br label %17

; <label>:37                                      ; preds = %17
  %38 = add i32 %i1.0, 1
  br label %14

; <label>:39                                      ; preds = %14
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* %m1, [3 x double]* %m2, [3 x double]* %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Promote 'by reference' arguments to scalars ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %3, label %12

; <label>:3                                       ; preds = %1, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %1 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %1, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %1 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %14, label %35

; <label>:14                                      ; preds = %12, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %12 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %16, label %33

; <label>:16                                      ; preds = %14, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %14 ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %.preheader3, label %.preheader2

.preheader3:                                      ; preds = %1
  br label %3

.preheader2:                                      ; preds = %1
  br label %12

; <label>:3                                       ; preds = %.preheader3, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %.preheader3 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %.preheader2, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %.preheader2 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %.preheader1, label %35

.preheader1:                                      ; preds = %12
  br label %14

; <label>:14                                      ; preds = %.preheader1, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %.preheader1 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %.preheader, label %33

.preheader:                                       ; preds = %14
  br label %16

; <label>:16                                      ; preds = %.preheader, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %.preheader ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %1

; <label>:1                                       ; preds = %10, %0
  %i.0 = phi i32 [ 0, %0 ], [ %11, %10 ]
  %2 = icmp ult i32 %i.0, 3
  br i1 %2, label %.preheader3, label %.preheader2

.preheader3:                                      ; preds = %1
  br label %3

.preheader2:                                      ; preds = %1
  br label %12

; <label>:3                                       ; preds = %.preheader3, %5
  %j.0 = phi i32 [ %9, %5 ], [ 0, %.preheader3 ]
  %4 = icmp ult i32 %j.0, 3
  br i1 %4, label %5, label %10

; <label>:5                                       ; preds = %3
  %6 = zext i32 %j.0 to i64
  %7 = zext i32 %i.0 to i64
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %7, i64 %6
  store double 0.000000e+00, double* %8, align 8
  %9 = add i32 %j.0, 1
  br label %3

; <label>:10                                      ; preds = %3
  %11 = add i32 %i.0, 1
  br label %1

; <label>:12                                      ; preds = %.preheader2, %33
  %i1.0 = phi i32 [ %34, %33 ], [ 0, %.preheader2 ]
  %13 = icmp ult i32 %i1.0, 3
  br i1 %13, label %.preheader1, label %35

.preheader1:                                      ; preds = %12
  br label %14

; <label>:14                                      ; preds = %.preheader1, %31
  %j2.0 = phi i32 [ %32, %31 ], [ 0, %.preheader1 ]
  %15 = icmp ult i32 %j2.0, 3
  br i1 %15, label %.preheader, label %33

.preheader:                                       ; preds = %14
  br label %16

; <label>:16                                      ; preds = %.preheader, %18
  %k.0 = phi i32 [ %30, %18 ], [ 0, %.preheader ]
  %17 = icmp ult i32 %k.0, 3
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %16
  %19 = zext i32 %j2.0 to i64
  %20 = zext i32 %i1.0 to i64
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %20, i64 %19
  %22 = load double, double* %21, align 8
  %23 = zext i32 %k.0 to i64
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %19, i64 %23
  %25 = load double, double* %24, align 8
  %26 = fadd double %22, %25
  %27 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %20, i64 %23
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, %26
  store double %29, double* %27, align 8
  %30 = add i32 %k.0, 1
  br label %16

; <label>:31                                      ; preds = %16
  %32 = add i32 %j2.0, 1
  br label %14

; <label>:33                                      ; preds = %14
  %34 = add i32 %i1.0, 1
  br label %12

; <label>:35                                      ; preds = %12
  ret void
}
*** IR Dump After Rotate Loops ***
; <label>:16                                      ; preds = %.preheader, %16
  %k.04 = phi i32 [ 0, %.preheader ], [ %28, %16 ]
  %17 = zext i32 %j2.0 to i64
  %18 = zext i32 %i1.0 to i64
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %18, i64 %17
  %20 = load double, double* %19, align 8
  %21 = zext i32 %k.04 to i64
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %17, i64 %21
  %23 = load double, double* %22, align 8
  %24 = fadd double %20, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %18, i64 %21
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = add i32 %k.04, 1
  %29 = icmp ult i32 %28, 3
  br i1 %29, label %16, label %30
*** IR Dump After Loop Invariant Code Motion ***
; <label>:19                                      ; preds = %.preheader, %19
  %k.04 = phi i32 [ 0, %.preheader ], [ %28, %19 ]
  %20 = load double, double* %18, align 8
  %21 = zext i32 %k.04 to i64
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %16, i64 %21
  %23 = load double, double* %22, align 8
  %24 = fadd double %20, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %17, i64 %21
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = add i32 %k.04, 1
  %29 = icmp ult i32 %28, 3
  br i1 %29, label %19, label %30
*** IR Dump After Unswitch loops ***
; <label>:19                                      ; preds = %.preheader, %19
  %k.04 = phi i32 [ 0, %.preheader ], [ %28, %19 ]
  %20 = load double, double* %18, align 8
  %21 = zext i32 %k.04 to i64
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %16, i64 %21
  %23 = load double, double* %22, align 8
  %24 = fadd double %20, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %17, i64 %21
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = add i32 %k.04, 1
  %29 = icmp ult i32 %28, 3
  br i1 %29, label %19, label %30
*** IR Dump After Rotate Loops ***
.preheader:                                       ; preds = %.preheader1, %28
  %j2.05 = phi i32 [ 0, %.preheader1 ], [ %29, %28 ]
  %14 = zext i32 %j2.05 to i64
  %15 = zext i32 %i1.0 to i64
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %15, i64 %14
  br label %17

; <label>:28                                      ; preds = %17
  %29 = add i32 %j2.05, 1
  %30 = icmp ult i32 %29, 3
  br i1 %30, label %.preheader, label %31

; <label>:17                                      ; preds = %.preheader, %17
  %k.04 = phi i32 [ 0, %.preheader ], [ %26, %17 ]
  %18 = load double, double* %16, align 8
  %19 = zext i32 %k.04 to i64
  %20 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %14, i64 %19
  %21 = load double, double* %20, align 8
  %22 = fadd double %18, %21
  %23 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %15, i64 %19
  %24 = load double, double* %23, align 8
  %25 = fadd double %24, %22
  store double %25, double* %23, align 8
  %26 = add i32 %k.04, 1
  %27 = icmp ult i32 %26, 3
  br i1 %27, label %17, label %28
*** IR Dump After Loop Invariant Code Motion ***
.preheader:                                       ; preds = %.preheader1, %28
  %j2.05 = phi i32 [ 0, %.preheader1 ], [ %29, %28 ]
  %15 = zext i32 %j2.05 to i64
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %14, i64 %15
  br label %17

; <label>:28                                      ; preds = %17
  %29 = add i32 %j2.05, 1
  %30 = icmp ult i32 %29, 3
  br i1 %30, label %.preheader, label %31

; <label>:17                                      ; preds = %.preheader, %17
  %k.04 = phi i32 [ 0, %.preheader ], [ %26, %17 ]
  %18 = load double, double* %16, align 8
  %19 = zext i32 %k.04 to i64
  %20 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %15, i64 %19
  %21 = load double, double* %20, align 8
  %22 = fadd double %18, %21
  %23 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %14, i64 %19
  %24 = load double, double* %23, align 8
  %25 = fadd double %24, %22
  store double %25, double* %23, align 8
  %26 = add i32 %k.04, 1
  %27 = icmp ult i32 %26, 3
  br i1 %27, label %17, label %28
*** IR Dump After Unswitch loops ***
.preheader:                                       ; preds = %.preheader1, %28
  %j2.05 = phi i32 [ 0, %.preheader1 ], [ %29, %28 ]
  %15 = zext i32 %j2.05 to i64
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %14, i64 %15
  br label %17

; <label>:28                                      ; preds = %17
  %29 = add i32 %j2.05, 1
  %30 = icmp ult i32 %29, 3
  br i1 %30, label %.preheader, label %31

; <label>:17                                      ; preds = %.preheader, %17
  %k.04 = phi i32 [ 0, %.preheader ], [ %26, %17 ]
  %18 = load double, double* %16, align 8
  %19 = zext i32 %k.04 to i64
  %20 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %15, i64 %19
  %21 = load double, double* %20, align 8
  %22 = fadd double %18, %21
  %23 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %14, i64 %19
  %24 = load double, double* %23, align 8
  %25 = fadd double %24, %22
  store double %25, double* %23, align 8
  %26 = add i32 %k.04, 1
  %27 = icmp ult i32 %26, 3
  br i1 %27, label %17, label %28
*** IR Dump After Rotate Loops ***
.preheader1:                                      ; preds = %.preheader2, %29
  %i1.06 = phi i32 [ 0, %.preheader2 ], [ %30, %29 ]
  %12 = zext i32 %i1.06 to i64
  br label %.preheader

; <label>:29                                      ; preds = %26
  %30 = add i32 %i1.06, 1
  %31 = icmp ult i32 %30, 3
  br i1 %31, label %.preheader1, label %32

; <label>:26                                      ; preds = %15
  %27 = add i32 %j2.05, 1
  %28 = icmp ult i32 %27, 3
  br i1 %28, label %.preheader, label %29

; <label>:15                                      ; preds = %.preheader, %15
  %k.04 = phi i32 [ 0, %.preheader ], [ %24, %15 ]
  %16 = load double, double* %14, align 8
  %17 = zext i32 %k.04 to i64
  %18 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %13, i64 %17
  %19 = load double, double* %18, align 8
  %20 = fadd double %16, %19
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %12, i64 %17
  %22 = load double, double* %21, align 8
  %23 = fadd double %22, %20
  store double %23, double* %21, align 8
  %24 = add i32 %k.04, 1
  %25 = icmp ult i32 %24, 3
  br i1 %25, label %15, label %26

.preheader:                                       ; preds = %.preheader1, %26
  %j2.05 = phi i32 [ 0, %.preheader1 ], [ %27, %26 ]
  %13 = zext i32 %j2.05 to i64
  %14 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %12, i64 %13
  br label %15
*** IR Dump After Loop Invariant Code Motion ***
.preheader1:                                      ; preds = %.preheader2, %29
  %i1.06 = phi i32 [ 0, %.preheader2 ], [ %30, %29 ]
  %12 = zext i32 %i1.06 to i64
  br label %.preheader

; <label>:29                                      ; preds = %26
  %30 = add i32 %i1.06, 1
  %31 = icmp ult i32 %30, 3
  br i1 %31, label %.preheader1, label %32

; <label>:26                                      ; preds = %15
  %27 = add i32 %j2.05, 1
  %28 = icmp ult i32 %27, 3
  br i1 %28, label %.preheader, label %29

; <label>:15                                      ; preds = %.preheader, %15
  %k.04 = phi i32 [ 0, %.preheader ], [ %24, %15 ]
  %16 = load double, double* %14, align 8
  %17 = zext i32 %k.04 to i64
  %18 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %13, i64 %17
  %19 = load double, double* %18, align 8
  %20 = fadd double %16, %19
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %12, i64 %17
  %22 = load double, double* %21, align 8
  %23 = fadd double %22, %20
  store double %23, double* %21, align 8
  %24 = add i32 %k.04, 1
  %25 = icmp ult i32 %24, 3
  br i1 %25, label %15, label %26

.preheader:                                       ; preds = %.preheader1, %26
  %j2.05 = phi i32 [ 0, %.preheader1 ], [ %27, %26 ]
  %13 = zext i32 %j2.05 to i64
  %14 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %12, i64 %13
  br label %15
*** IR Dump After Unswitch loops ***
.preheader1:                                      ; preds = %.preheader2, %29
  %i1.06 = phi i32 [ 0, %.preheader2 ], [ %30, %29 ]
  %12 = zext i32 %i1.06 to i64
  br label %.preheader

; <label>:29                                      ; preds = %26
  %30 = add i32 %i1.06, 1
  %31 = icmp ult i32 %30, 3
  br i1 %31, label %.preheader1, label %32

; <label>:26                                      ; preds = %15
  %27 = add i32 %j2.05, 1
  %28 = icmp ult i32 %27, 3
  br i1 %28, label %.preheader, label %29

; <label>:15                                      ; preds = %.preheader, %15
  %k.04 = phi i32 [ 0, %.preheader ], [ %24, %15 ]
  %16 = load double, double* %14, align 8
  %17 = zext i32 %k.04 to i64
  %18 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %13, i64 %17
  %19 = load double, double* %18, align 8
  %20 = fadd double %16, %19
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %12, i64 %17
  %22 = load double, double* %21, align 8
  %23 = fadd double %22, %20
  store double %23, double* %21, align 8
  %24 = add i32 %k.04, 1
  %25 = icmp ult i32 %24, 3
  br i1 %25, label %15, label %26

.preheader:                                       ; preds = %.preheader1, %26
  %j2.05 = phi i32 [ 0, %.preheader1 ], [ %27, %26 ]
  %13 = zext i32 %j2.05 to i64
  %14 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %12, i64 %13
  br label %15
*** IR Dump After Rotate Loops ***
; <label>:3                                       ; preds = %.preheader3, %3
  %j.07 = phi i32 [ 0, %.preheader3 ], [ %7, %3 ]
  %4 = zext i32 %j.07 to i64
  %5 = zext i32 %i.0 to i64
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %5, i64 %4
  store double 0.000000e+00, double* %6, align 8
  %7 = add i32 %j.07, 1
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %3, label %9
*** IR Dump After Loop Invariant Code Motion ***
; <label>:4                                       ; preds = %.preheader3, %4
  %j.07 = phi i32 [ 0, %.preheader3 ], [ %7, %4 ]
  %5 = zext i32 %j.07 to i64
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %3, i64 %5
  store double 0.000000e+00, double* %6, align 8
  %7 = add i32 %j.07, 1
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %4, label %9
*** IR Dump After Unswitch loops ***
; <label>:4                                       ; preds = %.preheader3, %4
  %j.07 = phi i32 [ 0, %.preheader3 ], [ %7, %4 ]
  %5 = zext i32 %j.07 to i64
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %3, i64 %5
  store double 0.000000e+00, double* %6, align 8
  %7 = add i32 %j.07, 1
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %4, label %9
*** IR Dump After Rotate Loops ***
.preheader3:                                      ; preds = %0, %7
  %i.08 = phi i32 [ 0, %0 ], [ %8, %7 ]
  %1 = zext i32 %i.08 to i64
  br label %2

; <label>:7                                       ; preds = %2
  %8 = add i32 %i.08, 1
  %9 = icmp ult i32 %8, 3
  br i1 %9, label %.preheader3, label %.preheader2

; <label>:2                                       ; preds = %.preheader3, %2
  %j.07 = phi i32 [ 0, %.preheader3 ], [ %5, %2 ]
  %3 = zext i32 %j.07 to i64
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %1, i64 %3
  store double 0.000000e+00, double* %4, align 8
  %5 = add i32 %j.07, 1
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %2, label %7
*** IR Dump After Loop Invariant Code Motion ***
.preheader3:                                      ; preds = %0, %7
  %i.08 = phi i32 [ 0, %0 ], [ %8, %7 ]
  %1 = zext i32 %i.08 to i64
  br label %2

; <label>:7                                       ; preds = %2
  %8 = add i32 %i.08, 1
  %9 = icmp ult i32 %8, 3
  br i1 %9, label %.preheader3, label %.preheader2

; <label>:2                                       ; preds = %.preheader3, %2
  %j.07 = phi i32 [ 0, %.preheader3 ], [ %5, %2 ]
  %3 = zext i32 %j.07 to i64
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %1, i64 %3
  store double 0.000000e+00, double* %4, align 8
  %5 = add i32 %j.07, 1
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %2, label %7
*** IR Dump After Unswitch loops ***
.preheader3:                                      ; preds = %0, %7
  %i.08 = phi i32 [ 0, %0 ], [ %8, %7 ]
  %1 = zext i32 %i.08 to i64
  br label %2

; <label>:7                                       ; preds = %2
  %8 = add i32 %i.08, 1
  %9 = icmp ult i32 %8, 3
  br i1 %9, label %.preheader3, label %.preheader2

; <label>:2                                       ; preds = %.preheader3, %2
  %j.07 = phi i32 [ 0, %.preheader3 ], [ %5, %2 ]
  %3 = zext i32 %j.07 to i64
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %1, i64 %3
  store double 0.000000e+00, double* %4, align 8
  %5 = add i32 %j.07, 1
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %2, label %7
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %.preheader3

.preheader3:                                      ; preds = %0, %7
  %i.08 = phi i32 [ 0, %0 ], [ %8, %7 ]
  %1 = zext i32 %i.08 to i64
  br label %2

.preheader2:                                      ; preds = %7
  br label %.preheader1

; <label>:2                                       ; preds = %.preheader3, %2
  %j.07 = phi i32 [ 0, %.preheader3 ], [ %5, %2 ]
  %3 = zext i32 %j.07 to i64
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %1, i64 %3
  store double 0.000000e+00, double* %4, align 8
  %5 = add i32 %j.07, 1
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %2, label %7

; <label>:7                                       ; preds = %2
  %8 = add i32 %i.08, 1
  %9 = icmp ult i32 %8, 3
  br i1 %9, label %.preheader3, label %.preheader2

.preheader1:                                      ; preds = %.preheader2, %27
  %i1.06 = phi i32 [ 0, %.preheader2 ], [ %28, %27 ]
  %10 = zext i32 %i1.06 to i64
  br label %.preheader

.preheader:                                       ; preds = %.preheader1, %24
  %j2.05 = phi i32 [ 0, %.preheader1 ], [ %25, %24 ]
  %11 = zext i32 %j2.05 to i64
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %10, i64 %11
  br label %13

; <label>:13                                      ; preds = %.preheader, %13
  %k.04 = phi i32 [ 0, %.preheader ], [ %22, %13 ]
  %14 = load double, double* %12, align 8
  %15 = zext i32 %k.04 to i64
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %11, i64 %15
  %17 = load double, double* %16, align 8
  %18 = fadd double %14, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 %15
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = add i32 %k.04, 1
  %23 = icmp ult i32 %22, 3
  br i1 %23, label %13, label %24

; <label>:24                                      ; preds = %13
  %25 = add i32 %j2.05, 1
  %26 = icmp ult i32 %25, 3
  br i1 %26, label %.preheader, label %27

; <label>:27                                      ; preds = %24
  %28 = add i32 %i1.06, 1
  %29 = icmp ult i32 %28, 3
  br i1 %29, label %.preheader1, label %30

; <label>:30                                      ; preds = %27
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %.preheader3

.preheader3:                                      ; preds = %0, %7
  %i.08 = phi i32 [ 0, %0 ], [ %8, %7 ]
  %1 = zext i32 %i.08 to i64
  br label %2

.preheader2:                                      ; preds = %7
  br label %.preheader1

; <label>:2                                       ; preds = %.preheader3, %2
  %j.07 = phi i32 [ 0, %.preheader3 ], [ %5, %2 ]
  %3 = zext i32 %j.07 to i64
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %1, i64 %3
  store double 0.000000e+00, double* %4, align 8
  %5 = add i32 %j.07, 1
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %2, label %7

; <label>:7                                       ; preds = %2
  %8 = add i32 %i.08, 1
  %9 = icmp ult i32 %8, 3
  br i1 %9, label %.preheader3, label %.preheader2

.preheader1:                                      ; preds = %.preheader2, %27
  %i1.06 = phi i32 [ 0, %.preheader2 ], [ %28, %27 ]
  %10 = zext i32 %i1.06 to i64
  br label %.preheader

.preheader:                                       ; preds = %.preheader1, %24
  %j2.05 = phi i32 [ 0, %.preheader1 ], [ %25, %24 ]
  %11 = zext i32 %j2.05 to i64
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %10, i64 %11
  br label %13

; <label>:13                                      ; preds = %.preheader, %13
  %k.04 = phi i32 [ 0, %.preheader ], [ %22, %13 ]
  %14 = load double, double* %12, align 8
  %15 = zext i32 %k.04 to i64
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %11, i64 %15
  %17 = load double, double* %16, align 8
  %18 = fadd double %14, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 %15
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = add i32 %k.04, 1
  %23 = icmp ult i32 %22, 3
  br i1 %23, label %13, label %24

; <label>:24                                      ; preds = %13
  %25 = add i32 %j2.05, 1
  %26 = icmp ult i32 %25, 3
  br i1 %26, label %.preheader, label %27

; <label>:27                                      ; preds = %24
  %28 = add i32 %i1.06, 1
  %29 = icmp ult i32 %28, 3
  br i1 %29, label %.preheader1, label %30

; <label>:30                                      ; preds = %27
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  br label %.preheader3

.preheader3:                                      ; preds = %0, %7
  %i.08 = phi i32 [ 0, %0 ], [ %8, %7 ]
  %1 = zext i32 %i.08 to i64
  br label %2

.preheader2:                                      ; preds = %7
  br label %.preheader1

; <label>:2                                       ; preds = %.preheader3, %2
  %j.07 = phi i32 [ 0, %.preheader3 ], [ %5, %2 ]
  %3 = zext i32 %j.07 to i64
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %1, i64 %3
  store double 0.000000e+00, double* %4, align 8
  %5 = add i32 %j.07, 1
  %6 = icmp ult i32 %5, 3
  br i1 %6, label %2, label %7

; <label>:7                                       ; preds = %2
  %8 = add i32 %i.08, 1
  %9 = icmp ult i32 %8, 3
  br i1 %9, label %.preheader3, label %.preheader2

.preheader1:                                      ; preds = %.preheader2, %27
  %i1.06 = phi i32 [ 0, %.preheader2 ], [ %28, %27 ]
  %10 = zext i32 %i1.06 to i64
  br label %.preheader

.preheader:                                       ; preds = %.preheader1, %24
  %j2.05 = phi i32 [ 0, %.preheader1 ], [ %25, %24 ]
  %11 = zext i32 %j2.05 to i64
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %10, i64 %11
  br label %13

; <label>:13                                      ; preds = %.preheader, %13
  %k.04 = phi i32 [ 0, %.preheader ], [ %22, %13 ]
  %14 = load double, double* %12, align 8
  %15 = zext i32 %k.04 to i64
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %11, i64 %15
  %17 = load double, double* %16, align 8
  %18 = fadd double %14, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 %15
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = add i32 %k.04, 1
  %23 = icmp ult i32 %22, 3
  br i1 %23, label %13, label %24

; <label>:24                                      ; preds = %13
  %25 = add i32 %j2.05, 1
  %26 = icmp ult i32 %25, 3
  br i1 %26, label %.preheader, label %27

; <label>:27                                      ; preds = %24
  %28 = add i32 %i1.06, 1
  %29 = icmp ult i32 %28, 3
  br i1 %29, label %.preheader1, label %30

; <label>:30                                      ; preds = %27
  ret void
}
*** IR Dump After Induction Variable Simplification ***
; <label>:13                                      ; preds = %.preheader, %13
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %13 ]
  %14 = load double, double* %12, align 8
  %15 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %11, i64 %indvars.iv
  %16 = load double, double* %15, align 8
  %17 = fadd double %14, %16
  %18 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 %indvars.iv
  %19 = load double, double* %18, align 8
  %20 = fadd double %19, %17
  store double %20, double* %18, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %13, label %21
*** IR Dump After Recognize loop idioms ***
; <label>:13                                      ; preds = %.preheader, %13
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %13 ]
  %14 = load double, double* %12, align 8
  %15 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %11, i64 %indvars.iv
  %16 = load double, double* %15, align 8
  %17 = fadd double %14, %16
  %18 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 %indvars.iv
  %19 = load double, double* %18, align 8
  %20 = fadd double %19, %17
  store double %20, double* %18, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %13, label %21
*** IR Dump After Delete dead loops ***
; <label>:13                                      ; preds = %.preheader, %13
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %13 ]
  %14 = load double, double* %12, align 8
  %15 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %11, i64 %indvars.iv
  %16 = load double, double* %15, align 8
  %17 = fadd double %14, %16
  %18 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 %indvars.iv
  %19 = load double, double* %18, align 8
  %20 = fadd double %19, %17
  store double %20, double* %18, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %13, label %21
*** IR Dump After Induction Variable Simplification ***
.preheader:                                       ; preds = %.preheader1, %12
  %indvars.iv = phi i64 [ 0, %.preheader1 ], [ %indvars.iv.next, %12 ]
  %11 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %10, i64 %indvars.iv
  br label %12

; <label>:12                                      ; preds = %.preheader
  %13 = load double, double* %11, align 8
  %14 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %indvars.iv, i64 0
  %15 = load double, double* %14, align 8
  %16 = fadd double %13, %15
  %17 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 0
  %18 = load double, double* %17, align 8
  %19 = fadd double %18, %16
  store double %19, double* %17, align 8
  %20 = load double, double* %11, align 8
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %indvars.iv, i64 1
  %22 = load double, double* %21, align 8
  %23 = fadd double %20, %22
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 1
  %25 = load double, double* %24, align 8
  %26 = fadd double %25, %23
  store double %26, double* %24, align 8
  %27 = load double, double* %11, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %indvars.iv, i64 2
  %29 = load double, double* %28, align 8
  %30 = fadd double %27, %29
  %31 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 2
  %32 = load double, double* %31, align 8
  %33 = fadd double %32, %30
  store double %33, double* %31, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader, label %34
*** IR Dump After Recognize loop idioms ***
.preheader:                                       ; preds = %.preheader1, %12
  %indvars.iv = phi i64 [ 0, %.preheader1 ], [ %indvars.iv.next, %12 ]
  %11 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %10, i64 %indvars.iv
  br label %12

; <label>:12                                      ; preds = %.preheader
  %13 = load double, double* %11, align 8
  %14 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %indvars.iv, i64 0
  %15 = load double, double* %14, align 8
  %16 = fadd double %13, %15
  %17 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 0
  %18 = load double, double* %17, align 8
  %19 = fadd double %18, %16
  store double %19, double* %17, align 8
  %20 = load double, double* %11, align 8
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %indvars.iv, i64 1
  %22 = load double, double* %21, align 8
  %23 = fadd double %20, %22
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 1
  %25 = load double, double* %24, align 8
  %26 = fadd double %25, %23
  store double %26, double* %24, align 8
  %27 = load double, double* %11, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %indvars.iv, i64 2
  %29 = load double, double* %28, align 8
  %30 = fadd double %27, %29
  %31 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 2
  %32 = load double, double* %31, align 8
  %33 = fadd double %32, %30
  store double %33, double* %31, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader, label %34
*** IR Dump After Delete dead loops ***
.preheader:                                       ; preds = %.preheader1, %12
  %indvars.iv = phi i64 [ 0, %.preheader1 ], [ %indvars.iv.next, %12 ]
  %11 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %10, i64 %indvars.iv
  br label %12

; <label>:12                                      ; preds = %.preheader
  %13 = load double, double* %11, align 8
  %14 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %indvars.iv, i64 0
  %15 = load double, double* %14, align 8
  %16 = fadd double %13, %15
  %17 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 0
  %18 = load double, double* %17, align 8
  %19 = fadd double %18, %16
  store double %19, double* %17, align 8
  %20 = load double, double* %11, align 8
  %21 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %indvars.iv, i64 1
  %22 = load double, double* %21, align 8
  %23 = fadd double %20, %22
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 1
  %25 = load double, double* %24, align 8
  %26 = fadd double %25, %23
  store double %26, double* %24, align 8
  %27 = load double, double* %11, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 %indvars.iv, i64 2
  %29 = load double, double* %28, align 8
  %30 = fadd double %27, %29
  %31 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %10, i64 2
  %32 = load double, double* %31, align 8
  %33 = fadd double %32, %30
  store double %33, double* %31, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader, label %34
*** IR Dump After Induction Variable Simplification ***
.preheader1:                                      ; preds = %.preheader2, %56
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %56 ]
  br label %.preheader

.preheader.19:                                    ; preds = %.preheader
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %13 = load double, double* %12, align 8
  %14 = fadd double %11, %13
  %15 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %16 = load double, double* %15, align 8
  %17 = fadd double %16, %14
  store double %17, double* %15, align 8
  %18 = load double, double* %10, align 8
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %18, %20
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = fadd double %23, %21
  store double %24, double* %22, align 8
  %25 = load double, double* %10, align 8
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %27 = load double, double* %26, align 8
  %28 = fadd double %25, %27
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %30 = load double, double* %29, align 8
  %31 = fadd double %30, %28
  store double %31, double* %29, align 8
  %32 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  br label %.preheader.210

.preheader:                                       ; preds = %.preheader1
  %10 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  br label %.preheader.19

.preheader.210:                                   ; preds = %.preheader.19
  %34 = load double, double* %32, align 8
  %35 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %36 = load double, double* %35, align 8
  %37 = fadd double %34, %36
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %39 = load double, double* %38, align 8
  %40 = fadd double %39, %37
  store double %40, double* %38, align 8
  %41 = load double, double* %32, align 8
  %42 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %43 = load double, double* %42, align 8
  %44 = fadd double %41, %43
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %46, %44
  store double %47, double* %45, align 8
  %48 = load double, double* %32, align 8
  %49 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %50 = load double, double* %49, align 8
  %51 = fadd double %48, %50
  %52 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %53 = load double, double* %52, align 8
  %54 = fadd double %53, %51
  store double %54, double* %52, align 8
  %55 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  br label %56

; <label>:56                                      ; preds = %.preheader.210
  %57 = load double, double* %55, align 8
  %58 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %59 = load double, double* %58, align 8
  %60 = fadd double %57, %59
  %61 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %62 = load double, double* %61, align 8
  %63 = fadd double %62, %60
  store double %63, double* %61, align 8
  %64 = load double, double* %55, align 8
  %65 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %66 = load double, double* %65, align 8
  %67 = fadd double %64, %66
  %68 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %69 = load double, double* %68, align 8
  %70 = fadd double %69, %67
  store double %70, double* %68, align 8
  %71 = load double, double* %55, align 8
  %72 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %73 = load double, double* %72, align 8
  %74 = fadd double %71, %73
  %75 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %76 = load double, double* %75, align 8
  %77 = fadd double %76, %74
  store double %77, double* %75, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader1, label %33
*** IR Dump After Recognize loop idioms ***
.preheader1:                                      ; preds = %.preheader2, %56
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %56 ]
  br label %.preheader

.preheader.19:                                    ; preds = %.preheader
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %13 = load double, double* %12, align 8
  %14 = fadd double %11, %13
  %15 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %16 = load double, double* %15, align 8
  %17 = fadd double %16, %14
  store double %17, double* %15, align 8
  %18 = load double, double* %10, align 8
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %18, %20
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = fadd double %23, %21
  store double %24, double* %22, align 8
  %25 = load double, double* %10, align 8
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %27 = load double, double* %26, align 8
  %28 = fadd double %25, %27
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %30 = load double, double* %29, align 8
  %31 = fadd double %30, %28
  store double %31, double* %29, align 8
  %32 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  br label %.preheader.210

.preheader:                                       ; preds = %.preheader1
  %10 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  br label %.preheader.19

.preheader.210:                                   ; preds = %.preheader.19
  %34 = load double, double* %32, align 8
  %35 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %36 = load double, double* %35, align 8
  %37 = fadd double %34, %36
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %39 = load double, double* %38, align 8
  %40 = fadd double %39, %37
  store double %40, double* %38, align 8
  %41 = load double, double* %32, align 8
  %42 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %43 = load double, double* %42, align 8
  %44 = fadd double %41, %43
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %46, %44
  store double %47, double* %45, align 8
  %48 = load double, double* %32, align 8
  %49 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %50 = load double, double* %49, align 8
  %51 = fadd double %48, %50
  %52 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %53 = load double, double* %52, align 8
  %54 = fadd double %53, %51
  store double %54, double* %52, align 8
  %55 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  br label %56

; <label>:56                                      ; preds = %.preheader.210
  %57 = load double, double* %55, align 8
  %58 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %59 = load double, double* %58, align 8
  %60 = fadd double %57, %59
  %61 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %62 = load double, double* %61, align 8
  %63 = fadd double %62, %60
  store double %63, double* %61, align 8
  %64 = load double, double* %55, align 8
  %65 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %66 = load double, double* %65, align 8
  %67 = fadd double %64, %66
  %68 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %69 = load double, double* %68, align 8
  %70 = fadd double %69, %67
  store double %70, double* %68, align 8
  %71 = load double, double* %55, align 8
  %72 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %73 = load double, double* %72, align 8
  %74 = fadd double %71, %73
  %75 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %76 = load double, double* %75, align 8
  %77 = fadd double %76, %74
  store double %77, double* %75, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader1, label %33
*** IR Dump After Delete dead loops ***
.preheader1:                                      ; preds = %.preheader2, %56
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %56 ]
  br label %.preheader

.preheader.19:                                    ; preds = %.preheader
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %13 = load double, double* %12, align 8
  %14 = fadd double %11, %13
  %15 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %16 = load double, double* %15, align 8
  %17 = fadd double %16, %14
  store double %17, double* %15, align 8
  %18 = load double, double* %10, align 8
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %18, %20
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = fadd double %23, %21
  store double %24, double* %22, align 8
  %25 = load double, double* %10, align 8
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %27 = load double, double* %26, align 8
  %28 = fadd double %25, %27
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %30 = load double, double* %29, align 8
  %31 = fadd double %30, %28
  store double %31, double* %29, align 8
  %32 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  br label %.preheader.210

.preheader:                                       ; preds = %.preheader1
  %10 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  br label %.preheader.19

.preheader.210:                                   ; preds = %.preheader.19
  %34 = load double, double* %32, align 8
  %35 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %36 = load double, double* %35, align 8
  %37 = fadd double %34, %36
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %39 = load double, double* %38, align 8
  %40 = fadd double %39, %37
  store double %40, double* %38, align 8
  %41 = load double, double* %32, align 8
  %42 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %43 = load double, double* %42, align 8
  %44 = fadd double %41, %43
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %46, %44
  store double %47, double* %45, align 8
  %48 = load double, double* %32, align 8
  %49 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %50 = load double, double* %49, align 8
  %51 = fadd double %48, %50
  %52 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %53 = load double, double* %52, align 8
  %54 = fadd double %53, %51
  store double %54, double* %52, align 8
  %55 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  br label %56

; <label>:56                                      ; preds = %.preheader.210
  %57 = load double, double* %55, align 8
  %58 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %59 = load double, double* %58, align 8
  %60 = fadd double %57, %59
  %61 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %62 = load double, double* %61, align 8
  %63 = fadd double %62, %60
  store double %63, double* %61, align 8
  %64 = load double, double* %55, align 8
  %65 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %66 = load double, double* %65, align 8
  %67 = fadd double %64, %66
  %68 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %69 = load double, double* %68, align 8
  %70 = fadd double %69, %67
  store double %70, double* %68, align 8
  %71 = load double, double* %55, align 8
  %72 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %73 = load double, double* %72, align 8
  %74 = fadd double %71, %73
  %75 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %76 = load double, double* %75, align 8
  %77 = fadd double %76, %74
  store double %77, double* %75, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader1, label %33
*** IR Dump After Unroll loops ***
.preheader1:                                      ; preds = %.preheader2, %56
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %56 ]
  br label %.preheader

.preheader.19:                                    ; preds = %.preheader
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %13 = load double, double* %12, align 8
  %14 = fadd double %11, %13
  %15 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %16 = load double, double* %15, align 8
  %17 = fadd double %16, %14
  store double %17, double* %15, align 8
  %18 = load double, double* %10, align 8
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %18, %20
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = fadd double %23, %21
  store double %24, double* %22, align 8
  %25 = load double, double* %10, align 8
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %27 = load double, double* %26, align 8
  %28 = fadd double %25, %27
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %30 = load double, double* %29, align 8
  %31 = fadd double %30, %28
  store double %31, double* %29, align 8
  %32 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  br label %.preheader.210

.preheader:                                       ; preds = %.preheader1
  %10 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  br label %.preheader.19

.preheader.210:                                   ; preds = %.preheader.19
  %34 = load double, double* %32, align 8
  %35 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %36 = load double, double* %35, align 8
  %37 = fadd double %34, %36
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %39 = load double, double* %38, align 8
  %40 = fadd double %39, %37
  store double %40, double* %38, align 8
  %41 = load double, double* %32, align 8
  %42 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %43 = load double, double* %42, align 8
  %44 = fadd double %41, %43
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %46, %44
  store double %47, double* %45, align 8
  %48 = load double, double* %32, align 8
  %49 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %50 = load double, double* %49, align 8
  %51 = fadd double %48, %50
  %52 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %53 = load double, double* %52, align 8
  %54 = fadd double %53, %51
  store double %54, double* %52, align 8
  %55 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  br label %56

; <label>:56                                      ; preds = %.preheader.210
  %57 = load double, double* %55, align 8
  %58 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %59 = load double, double* %58, align 8
  %60 = fadd double %57, %59
  %61 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %62 = load double, double* %61, align 8
  %63 = fadd double %62, %60
  store double %63, double* %61, align 8
  %64 = load double, double* %55, align 8
  %65 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %66 = load double, double* %65, align 8
  %67 = fadd double %64, %66
  %68 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %69 = load double, double* %68, align 8
  %70 = fadd double %69, %67
  store double %70, double* %68, align 8
  %71 = load double, double* %55, align 8
  %72 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %73 = load double, double* %72, align 8
  %74 = fadd double %71, %73
  %75 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %76 = load double, double* %75, align 8
  %77 = fadd double %76, %74
  store double %77, double* %75, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader1, label %33
*** IR Dump After Induction Variable Simplification ***
; <label>:2                                       ; preds = %.preheader3, %2
  %indvars.iv11 = phi i64 [ 0, %.preheader3 ], [ %indvars.iv.next12, %2 ]
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %1, i64 %indvars.iv11
  store double 0.000000e+00, double* %3, align 8
  %indvars.iv.next12 = add nuw nsw i64 %indvars.iv11, 1
  %exitcond13 = icmp ne i64 %indvars.iv.next12, 3
  br i1 %exitcond13, label %2, label %4
*** IR Dump After Recognize loop idioms ***
; <label>:1                                       ; preds = %.preheader3, %1
  %indvars.iv11 = phi i64 [ 0, %.preheader3 ], [ %indvars.iv.next12, %1 ]
  %indvars.iv.next12 = add nuw nsw i64 %indvars.iv11, 1
  %exitcond13 = icmp ne i64 %indvars.iv.next12, 3
  br i1 %exitcond13, label %1, label %2
*** IR Dump After Induction Variable Simplification ***
.preheader3:                                      ; preds = %0, %1
  %indvar = phi i64 [ 0, %0 ], [ %indvar.next, %1 ]
  %scevgep = getelementptr [3 x double], [3 x double]* %m3, i64 %indvar, i64 0
  %scevgep14 = bitcast double* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep14, i8 0, i64 24, i32 8, i1 false)
  br label %1

; <label>:1                                       ; preds = %.preheader3
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond15 = icmp ne i64 %indvar.next, 3
  br i1 %exitcond15, label %.preheader3, label %.preheader2
*** IR Dump After Recognize loop idioms ***
.preheader3:                                      ; preds = %0, %1
  %indvar = phi i64 [ 0, %0 ], [ %indvar.next, %1 ]
  br label %1

; <label>:1                                       ; preds = %.preheader3
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond15 = icmp ne i64 %indvar.next, 3
  br i1 %exitcond15, label %.preheader3, label %.preheader2
*** IR Dump After MergedLoadStoreMotion ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader2

.preheader2:                                      ; preds = %0
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader2, %47
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %47 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader1
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  br label %.preheader.19

.preheader.19:                                    ; preds = %.preheader
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %4 = load double, double* %3, align 8
  %5 = fadd double %2, %4
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %7 = load double, double* %6, align 8
  %8 = fadd double %7, %5
  store double %8, double* %6, align 8
  %9 = load double, double* %1, align 8
  %10 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %11 = load double, double* %10, align 8
  %12 = fadd double %9, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %1, align 8
  %17 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %18 = load double, double* %17, align 8
  %19 = fadd double %16, %18
  %20 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %21 = load double, double* %20, align 8
  %22 = fadd double %21, %19
  store double %22, double* %20, align 8
  %23 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  br label %.preheader.210

; <label>:24                                      ; preds = %47
  ret void

.preheader.210:                                   ; preds = %.preheader.19
  %25 = load double, double* %23, align 8
  %26 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %27 = load double, double* %26, align 8
  %28 = fadd double %25, %27
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %30 = load double, double* %29, align 8
  %31 = fadd double %30, %28
  store double %31, double* %29, align 8
  %32 = load double, double* %23, align 8
  %33 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %34 = load double, double* %33, align 8
  %35 = fadd double %32, %34
  %36 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %37 = load double, double* %36, align 8
  %38 = fadd double %37, %35
  store double %38, double* %36, align 8
  %39 = load double, double* %23, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %44 = load double, double* %43, align 8
  %45 = fadd double %44, %42
  store double %45, double* %43, align 8
  %46 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  br label %47

; <label>:47                                      ; preds = %.preheader.210
  %48 = load double, double* %46, align 8
  %49 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %50 = load double, double* %49, align 8
  %51 = fadd double %48, %50
  %52 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %53 = load double, double* %52, align 8
  %54 = fadd double %53, %51
  store double %54, double* %52, align 8
  %55 = load double, double* %46, align 8
  %56 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %57 = load double, double* %56, align 8
  %58 = fadd double %55, %57
  %59 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %60 = load double, double* %59, align 8
  %61 = fadd double %60, %58
  store double %61, double* %59, align 8
  %62 = load double, double* %46, align 8
  %63 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %64 = load double, double* %63, align 8
  %65 = fadd double %62, %64
  %66 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %67 = load double, double* %66, align 8
  %68 = fadd double %67, %65
  store double %68, double* %66, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader1, label %24
}
*** IR Dump After Global Value Numbering ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader2, %.preheader1
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader1, label %54

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader2, %.preheader1
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader1, label %54

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader2, %.preheader1
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader1, label %54

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader2, %.preheader1
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.preheader1, label %54

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %1 = load double, double* %0, align 8
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %3 = load double, double* %2, align 8
  %4 = fadd double %1, %3
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %6 = load double, double* %5, align 8
  %7 = fadd double %6, %4
  store double %7, double* %5, align 8
  %8 = load double, double* %0, align 8
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %10 = load double, double* %9, align 8
  %11 = fadd double %8, %10
  %12 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %13 = load double, double* %12, align 8
  %14 = fadd double %13, %11
  store double %14, double* %12, align 8
  %15 = load double, double* %0, align 8
  %16 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %17 = load double, double* %16, align 8
  %18 = fadd double %15, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %25 = load double, double* %24, align 8
  %26 = fadd double %23, %25
  %27 = fadd double %7, %26
  store double %27, double* %5, align 8
  %28 = load double, double* %22, align 8
  %29 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %30 = load double, double* %29, align 8
  %31 = fadd double %28, %30
  %32 = fadd double %14, %31
  store double %32, double* %12, align 8
  %33 = load double, double* %22, align 8
  %34 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %33, %35
  %37 = fadd double %21, %36
  store double %37, double* %19, align 8
  %38 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %41 = load double, double* %40, align 8
  %42 = fadd double %39, %41
  %43 = fadd double %27, %42
  store double %43, double* %5, align 8
  %44 = load double, double* %38, align 8
  %45 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %46 = load double, double* %45, align 8
  %47 = fadd double %44, %46
  %48 = fadd double %32, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %38, align 8
  %50 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  %53 = fadd double %37, %52
  store double %53, double* %19, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Loop Invariant Code Motion ***
.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Function Integration/Inlining ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After Promote 'by reference' arguments to scalars ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
*** IR Dump After Float to int ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Rotate Loops ***
.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After SLP Vectorizer ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Unroll loops ***
.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Loop Invariant Code Motion ***
.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
*** IR Dump After Strip Unused Function Prototypes ***; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
*** IR Dump After Eliminate Available Externally Globals ***; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
*** IR Dump After Dead Global Elimination ***; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
*** IR Dump After Merge Duplicate Global Constants ***; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
*** IR Dump After Module Verifier ***
; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}
; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
*** IR Dump After Print module to stderr ***; ModuleID = '4.llvm'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @mult([3 x double]* nocapture readonly %m1, [3 x double]* nocapture readonly %m2, [3 x double]* nocapture %m3) #0 {
.preheader2:
  %m316 = bitcast [3 x double]* %m3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %m316, i8 0, i64 72, i32 8, i1 false)
  %0 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 0
  %1 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 1
  %2 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 0, i64 2
  %3 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 0
  %4 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 1
  %5 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 1, i64 2
  %6 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 0
  %7 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 1
  %8 = getelementptr inbounds [3 x double], [3 x double]* %m2, i64 2, i64 2
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1, %.preheader2
  %indvars.iv = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next, %.preheader1 ]
  %9 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %0, align 8
  %12 = fadd double %10, %11
  %13 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %14, %12
  store double %15, double* %13, align 8
  %16 = load double, double* %9, align 8
  %17 = load double, double* %1, align 8
  %18 = fadd double %16, %17
  %19 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 1
  %20 = load double, double* %19, align 8
  %21 = fadd double %20, %18
  store double %21, double* %19, align 8
  %22 = load double, double* %9, align 8
  %23 = load double, double* %2, align 8
  %24 = fadd double %22, %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %m3, i64 %indvars.iv, i64 2
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  store double %27, double* %25, align 8
  %28 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 1
  %29 = load double, double* %28, align 8
  %30 = load double, double* %3, align 8
  %31 = fadd double %29, %30
  %32 = fadd double %15, %31
  store double %32, double* %13, align 8
  %33 = load double, double* %28, align 8
  %34 = load double, double* %4, align 8
  %35 = fadd double %33, %34
  %36 = fadd double %21, %35
  store double %36, double* %19, align 8
  %37 = load double, double* %28, align 8
  %38 = load double, double* %5, align 8
  %39 = fadd double %37, %38
  %40 = fadd double %27, %39
  store double %40, double* %25, align 8
  %41 = getelementptr inbounds [3 x double], [3 x double]* %m1, i64 %indvars.iv, i64 2
  %42 = load double, double* %41, align 8
  %43 = load double, double* %6, align 8
  %44 = fadd double %42, %43
  %45 = fadd double %32, %44
  store double %45, double* %13, align 8
  %46 = load double, double* %41, align 8
  %47 = load double, double* %7, align 8
  %48 = fadd double %46, %47
  %49 = fadd double %36, %48
  store double %49, double* %19, align 8
  %50 = load double, double* %41, align 8
  %51 = load double, double* %8, align 8
  %52 = fadd double %50, %51
  %53 = fadd double %40, %52
  store double %53, double* %25, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %54, label %.preheader1

; <label>:54                                      ; preds = %.preheader1
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.1 (tags/RELEASE_371/final)"}
